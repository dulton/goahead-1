/*
###############################################################
# FileName      	: DbTblWebOpt.h
# Version           : 3.0
# Create			:
# Function Describe : 系统数据表单处理函数
# Modified 			: 
###############################################################
*/

#include <signal.h>
#include	"wsIntrn.h"
#include  "DbTblWebOpt.h"
#define  OSD_FILE "/home/TextOtc/ambaipcam/IPC_Q313/config/TextOSD.cfg"
#define  OSD_FILEF "/home/OsdSave.txt"
#define  OSD_FIFO "/home/fifOSD.cfg"
#define	WTA_TEXTOSD_SET	0x02
typedef struct textOSD_s 
{
	int stream_nb;	                   //码流号  
	int area_nb;	                     //区域号
	int enable;                        //是否允许 :0直接不  1：全部清空
	
  int type_osdtext;                  //字符类型 0：描述  1：时间
  int x;                             //X的起始位置
	int y;                             //Y的起始位置
	int width;                         //显示区域宽度 
	int height;                        //显示区域高度
	
	
	int color;                         //颜色
	int font_size;                     //字体大小
	int outline;                       //外框
	int bold;                          //黑体
	int italic;                        //斜体

	int rotate;                        //旋转方向	
	char osdtext[255];                 //叠加字符
}textOSD_t;


typedef struct wta_fifocmd_s
{
	unsigned char Cmdhead;		//0x0A
	unsigned char Cmd_ver;		//0x01
	unsigned char Cmd_ID;
	unsigned char Cmd_Para[12];
	unsigned char Cmd_check;	//0x00
}	wta_fifocmd_t;

pid_t CreateProcess(char *pszProcName, char *pszParam[]);

/******************************************************************************/

/*                              ASP操作                                       */

/******************************************************************************/
// Get System Run Status
int aspSysStatusDisplay(int eid, webs_t wp, int argc, char_t **argv)
{
	return 0;
}


/******************************************************************************/

/*                              表单操作                                      */

/******************************************************************************/

textOSD_t osd_t[4];
FILE *osdfp;

void readOsd()                                                 //从二进制里读
{
	memset(&osd_t,0,sizeof(textOSD_t));
  if((osdfp=fopen(OSD_FILE,"rb"))==NULL)
	{
		printf("can not open file \n");
		return;
	}
	else
	{	
		fread(&osd_t,sizeof(textOSD_t)*4,1,osdfp);
	}
}

void writeOsd()                                         //从二进制里写入
{
	
	if((osdfp=fopen(OSD_FILE,"wb"))==NULL)
	{
		printf("can not open file \n");
		return;
	}
	else
	{	
		fwrite(&osd_t,sizeof(textOSD_t)*4,1,osdfp);
	}
	fclose(osdfp);
}

void Fifowrite()                                       //Fifo通信
{
	wta_fifocmd_t  fifcig_t;
	fifcig_t.Cmdhead=0x0A;
	fifcig_t.Cmd_ver=0x01;
	fifcig_t.Cmd_ID=WTA_TEXTOSD_SET;
	//fifcig_t.Cmd_Para=0x02;
	fifcig_t.Cmd_check=0x00;
	int real_wnum = 0;
  int fifo_fd = open(OSD_FIFO,O_WRONLY,0);
  printf("fifo: %d\n", fifo_fd);
  if(fifo_fd)
	  {
    	real_wnum = write(fifo_fd,&fifcig_t,sizeof(fifcig_t));
    	if(real_wnum==-1)
        	printf("write to fifo error; try later real_wnum=%d\n",real_wnum);
    	else 
        	printf("real write num is %d\n",real_wnum);


      close(fifo_fd);
	 }
	
}


void FormOSD(webs_t wp,char_t *path,char_t *query)
{
  
	char_t *pszOperate = NULL;

  char_t *pszTxt = NULL;
  /*
  char_t *pszSizet = NULL;
  char_t *pszOutline = NULL;
  char_t *pszBold = NULL;
  char_t *pszItalic = NULL;
  char_t *pszColor = NULL;
  char_t *pszStartX = NULL;
  char_t *pszStartY = NULL;
  char_t *pszTimabl = NULL;
  */
	pszOperate = websGetVar(wp, T("Operate"), T(""));
	
	printf("OSD operate: %s\n", pszOperate);

	// get osd para
	if (0 == gstricmp(pszOperate, T("get"))) {
		 
		  
			readOsd();                         //读 
			printf("pszTxt1=%s\n",osd_t[0].osdtext);
			printf("pszSizet1=%d\n",osd_t[0].width);
			printf("pszOutline1=%d\n",osd_t[0].font_size);
			printf("pszBold1=%d\n",osd_t[0].height);
			printf("pszItalic1=%d\n",osd_t[0].x);
			printf("pszColor1=%d\n",osd_t[0].y);
			printf("pszStartX1=%d\n",osd_t[0].outline);
			printf("pszStartY1=%d\n",osd_t[0].color);
			printf("pszTimabl1=%d\n",osd_t[0].bold);
			printf("pszTimabl1=%d\n",osd_t[0].italic);
					
			printf("osdtext2=%s\n",osd_t[1].osdtext);
			printf("osdwidth2=%d\n",osd_t[1].width);
			printf("font_size2=%d\n",osd_t[1].font_size);
			printf("osdhigh2=%d\n",osd_t[1].height);
			printf("x2=%d\n",osd_t[1].x);
			printf("y2=%d\n",osd_t[1].y);
			printf("outline2=%d\n",osd_t[1].outline);
			printf("color2=%d\n",osd_t[1].color);
			printf("bold2=%d\n",osd_t[1].bold);
			printf("italic2=%d\n",osd_t[1].italic);
			
			printf("stream_nb3=%d\n",osd_t[2].stream_nb);
			printf("area_nb3=%d\n",osd_t[2].area_nb);
			printf("osdtext3=%s\n",osd_t[2].osdtext);
			printf("osdwidth3=%d\n",osd_t[2].width);
			printf("font_size3=%d\n",osd_t[2].font_size);
			printf("osdhigh3=%d\n",osd_t[2].height);
			printf("x3=%d\n",osd_t[2].x);
			printf("y3=%d\n",osd_t[2].y);
			printf("outline3=%d\n",osd_t[2].outline);
			printf("color3=%d\n",osd_t[2].color);
			printf("bold3=%d\n",osd_t[2].bold);
			printf("italic3=%d\n",osd_t[2].italic);
			printf("type3=%d\n",osd_t[2].type_osdtext);
			printf("rotate3=%d\n",osd_t[2].rotate);
			
			fclose(osdfp);
			
			websWrite(wp, T("HTTP/1.0 200 OK\n"));
			websWrite(wp, T("Server: %s\r\n"), WEBS_NAME);
			websWrite(wp, T("Pragma: no-cache\n"));
			websWrite(wp, T("Cache-control: no-cache\n"));
			websWrite(wp, T("Content-Type: text/xml\n"));
			websWrite(wp, T("\n"));
		
			websWrite(wp, T("<?xml version='1.0' encoding='UTF-8'?>"));
			websWrite(wp, T("<OSD>"));
			websWrite(wp, T("<s1_text1>%s</s1_text1>"), osd_t[0].osdtext);
			websWrite(wp, T("<s1_text1_width>%d</s1_text1_width>"),osd_t[0].width);
			websWrite(wp, T("<s1_text1_size>%d</s1_text1_size>"), osd_t[0].font_size);
			websWrite(wp, T("<s1_text1_high>%d</s1_text1_high>"), osd_t[0].height);
			websWrite(wp, T("<s1_text1_startx>%d</s1_text1_startx>"), osd_t[0].x);
			websWrite(wp, T("<s1_text1_starty>%d</s1_text1_starty>"), osd_t[0].y);
			websWrite(wp, T("<s1_text1_outline>%d</s1_text1_outline>"), osd_t[0].outline);
			websWrite(wp, T("<s1_text1_color>%d</s1_text1_color>"), osd_t[0].color);
			websWrite(wp, T("<s1_text1_bold>%d</s1_text1_bold>"), osd_t[0].bold);
			websWrite(wp, T("<s1_text1_italic>%d</s1_text1_italic>"), osd_t[0].italic);
			websWrite(wp, T("<s1_text1_type>%d</s1_text1_type>"), osd_t[0].type_osdtext);
			websWrite(wp, T("<s1_text1_rotate>%d</s1_text1_rotate>"), osd_t[0].rotate);
			
			websWrite(wp, T("<s1_text2>%s</s1_text2>"), osd_t[1].osdtext);
			websWrite(wp, T("<s1_text2_width>%d</s1_text2_width>"),osd_t[1].width);
			websWrite(wp, T("<s1_text2_size>%d</s1_text2_size>"), osd_t[1].font_size);
			websWrite(wp, T("<s1_text2_high>%d</s1_text2_high>"), osd_t[1].height);
			websWrite(wp, T("<s1_text2_startx>%d</s1_text2_startx>"), osd_t[1].x);
			websWrite(wp, T("<s1_text2_starty>%d</s1_text2_starty>"), osd_t[1].y);
			websWrite(wp, T("<s1_text2_outline>%d</s1_text2_outline>"), osd_t[1].outline);
			websWrite(wp, T("<s1_text2_color>%d</s1_text2_color>"), osd_t[1].color);
			websWrite(wp, T("<s1_text2_bold>%d</s1_text2_bold>"), osd_t[1].bold);
			websWrite(wp, T("<s1_text2_italic>%d</s1_text2_italic>"), osd_t[1].italic);
			websWrite(wp, T("<s1_text2_type>%d</s1_text2_type>"), osd_t[1].type_osdtext);
			websWrite(wp, T("<s1_text2_rotate>%d</s1_text2_rotate>"), osd_t[1].rotate);
			
			websWrite(wp, T("<s1_text3>%s</s1_text3>"), osd_t[2].osdtext);
			websWrite(wp, T("<s1_text3_width>%d</s1_text3_width>"),osd_t[2].width);
			websWrite(wp, T("<s1_text3_size>%d</s1_text3_size>"), osd_t[2].font_size);
			websWrite(wp, T("<s1_text3_high>%d</s1_text3_high>"), osd_t[2].height);
			websWrite(wp, T("<s1_text3_startx>%d</s1_text3_startx>"), osd_t[2].x);
			websWrite(wp, T("<s1_text3_starty>%d</s1_text3_starty>"), osd_t[2].y);
			websWrite(wp, T("<s1_text3_outline>%d</s1_text3_outline>"), osd_t[2].outline);
			websWrite(wp, T("<s1_text3_color>%d</s1_text3_color>"), osd_t[2].color);
			websWrite(wp, T("<s1_text3_bold>%d</s1_text3_bold>"), osd_t[2].bold);
			websWrite(wp, T("<s1_text3_italic>%d</s1_text3_italic>"), osd_t[2].italic);
			websWrite(wp, T("<s1_text3_type>%d</s1_text3_type>"), osd_t[2].type_osdtext);
			websWrite(wp, T("<s1_text3_rotate>%d</s1_text3_rotate>"), osd_t[2].rotate);
			websWrite(wp, T("</OSD>"));
			websDone(wp, 200);
	}
	// set osd
	else if (0 == gstricmp(pszOperate, T("set")))
 {
		char_t *pszJudge = NULL;
		pszJudge=websGetVar(wp, T("text_judge"), T("")); 
	  printf("ttttt%s\n",pszJudge);
	  memset(&osd_t,0,sizeof(textOSD_t));
	  if (0 == gstricmp(pszJudge, T("1")))
		{
			readOsd();                                                                    //先读
			pszTxt=websGetVar(wp, T("s1_text1"), T(""));
			strcpy(osd_t[0].osdtext,pszTxt);                                              //以字符串保存
			osd_t[0].stream_nb=0;
			osd_t[0].area_nb=0;	
			osd_t[0].width=gatoi(websGetVar(wp, T("s1_text1_width"), T("")));
			osd_t[0].font_size=gatoi(websGetVar(wp, T("s1_text1_size"), T("")));
			osd_t[0].height=gatoi(websGetVar(wp, T("s1_text1_high"), T("")));
			osd_t[0].x=gatoi(websGetVar(wp, T("s1_text1_startx"), T("")));
			osd_t[0].y=gatoi(websGetVar(wp, T("s1_text1_starty"), T("")));
			osd_t[0].outline=gatoi(websGetVar(wp, T("s1_text1_outline"), T("")));
			osd_t[0].color=gatoi(websGetVar(wp, T("s1_text1_color"), T("")));
			osd_t[0].bold=gatoi(websGetVar(wp, T("s1_text1_bold"), T("")));
			osd_t[0].italic=gatoi(websGetVar(wp, T("s1_text1_italic"), T("")));
			osd_t[0].type_osdtext=gatoi(websGetVar(wp, T("s1_text1_type"), T("")));
			osd_t[0].rotate=gatoi(websGetVar(wp, T("s1_text1_rotate"), T("")));
			osd_t[0].enable=gatoi(websGetVar(wp, T("text_clean"), T("")));
			printf("No___1\n");
			printf("stream_nb1=%d\n",osd_t[0].stream_nb);
			printf("area_nb=%d\n",osd_t[0].area_nb);
			printf("pszTxt1=%s\n",osd_t[0].osdtext);
			printf("pszSizet1=%d\n",osd_t[0].width);
			printf("pszOutline1=%d\n",osd_t[0].font_size);
			printf("pszBold1=%d\n",osd_t[0].height);
			printf("pszItalic1=%d\n",osd_t[0].x);
			printf("pszColor1=%d\n",osd_t[0].y);
			printf("pszStartX1=%d\n",osd_t[0].outline);
			printf("pszStartY1=%d\n",osd_t[0].color);
			printf("pszTimabl1=%d\n",osd_t[0].bold);
			printf("pszTimabl1=%d\n",osd_t[0].italic);
			printf("type1=%d\n",osd_t[0].type_osdtext);
			printf("rotate=%d\n",osd_t[0].rotate);
			printf("clean=%d\n",osd_t[0].enable);
			
			writeOsd();	                   //把传过来的参数覆盖。再写入文件中
			
			Fifowrite();                   //Fifo通信
    }  
    
    
    	if (0 == gstricmp(pszJudge, T("2")))
		{

			readOsd();                          //先读
			pszTxt=websGetVar(wp, T("s1_text2"), T(""));
			strcpy(osd_t[1].osdtext,pszTxt);
			osd_t[1].stream_nb=1;
			osd_t[1].area_nb=1;
			osd_t[1].width=gatoi(websGetVar(wp, T("s1_text2_width"), T("")));
			osd_t[1].font_size=gatoi(websGetVar(wp, T("s1_text2_size"), T("")));
			osd_t[1].height=gatoi(websGetVar(wp, T("s1_text2_high"), T("")));
			osd_t[1].x=gatoi(websGetVar(wp, T("s1_text2_startx"), T("")));
			osd_t[1].y=gatoi(websGetVar(wp, T("s1_text2_starty"), T("")));
			osd_t[1].outline=gatoi(websGetVar(wp, T("s1_text2_outline"), T("")));
			osd_t[1].color=gatoi(websGetVar(wp, T("s1_text2_color"), T("")));
			osd_t[1].bold=gatoi(websGetVar(wp, T("s1_text2_bold"), T("")));
			osd_t[1].italic=gatoi(websGetVar(wp, T("s1_text2_italic"), T("")));
			osd_t[1].type_osdtext=gatoi(websGetVar(wp, T("s1_text2_type"), T("")));
			osd_t[1].rotate=gatoi(websGetVar(wp, T("s1_text2_rotate"), T("")));
			osd_t[1].enable=gatoi(websGetVar(wp, T("text_clean"), T("")));
			printf("No___2\n");
			printf("stream_nb2=%d\n",osd_t[1].stream_nb);
			printf("area_nb2=%d\n",osd_t[1].area_nb);
			printf("osdtext2=%s\n",osd_t[1].osdtext);
			printf("osdwidth2=%d\n",osd_t[1].width);
			printf("font_size2=%d\n",osd_t[1].font_size);
			printf("osdhigh2=%d\n",osd_t[1].height);
			printf("x2=%d\n",osd_t[1].x);
			printf("y2=%d\n",osd_t[1].y);
			printf("outline2=%d\n",osd_t[1].outline);
			printf("color2=%d\n",osd_t[1].color);
			printf("bold2=%d\n",osd_t[1].bold);
			printf("italic2=%d\n",osd_t[1].italic);
			printf("type2=%d\n",osd_t[1].type_osdtext);
			printf("rotate2=%d\n",osd_t[1].rotate);
			printf("clean=%d\n",osd_t[1].enable);
			
			writeOsd();	                   //把传过来的参数覆盖。再写入文件中
			
			Fifowrite();                   //Fifo通信
			
    }    
    
    	if (0 == gstricmp(pszJudge, T("3")))
		{

			readOsd();                          //先读
			pszTxt=websGetVar(wp, T("s1_text3"), T(""));
			strcpy(osd_t[2].osdtext,pszTxt);
			osd_t[2].stream_nb=2;
			osd_t[2].area_nb=2;
			osd_t[2].width=gatoi(websGetVar(wp, T("s1_text3_width"), T("")));
			osd_t[2].font_size=gatoi(websGetVar(wp, T("s1_text3_size"), T("")));
			osd_t[2].height=gatoi(websGetVar(wp, T("s1_text3_high"), T("")));
			osd_t[2].x=gatoi(websGetVar(wp, T("s1_text3_startx"), T("")));
			osd_t[2].y=gatoi(websGetVar(wp, T("s1_text3_starty"), T("")));
			osd_t[2].outline=gatoi(websGetVar(wp, T("s1_text3_outline"), T("")));
			osd_t[2].color=gatoi(websGetVar(wp, T("s1_text3_color"), T("")));
			osd_t[2].bold=gatoi(websGetVar(wp, T("s1_text3_bold"), T("")));
			osd_t[2].italic=gatoi(websGetVar(wp, T("s1_text3_italic"), T("")));
			osd_t[2].type_osdtext=gatoi(websGetVar(wp, T("s1_text3_type"), T("")));
			osd_t[2].rotate=gatoi(websGetVar(wp, T("s1_text3_rotate"), T("")));
			osd_t[2].enable=gatoi(websGetVar(wp, T("text_clean"), T("")));
			printf("No___3\n");
			printf("stream_nb3=%d\n",osd_t[2].stream_nb);
			printf("area_nb3=%d\n",osd_t[2].area_nb);
			printf("osdtext3=%s\n",osd_t[2].osdtext);
			printf("osdwidth3=%d\n",osd_t[2].width);
			printf("font_size3=%d\n",osd_t[2].font_size);
			printf("osdhigh3=%d\n",osd_t[2].height);
			printf("x3=%d\n",osd_t[2].x);
			printf("y3=%d\n",osd_t[2].y);
			printf("outline3=%d\n",osd_t[2].outline);
			printf("color3=%d\n",osd_t[2].color);
			printf("bold3=%d\n",osd_t[2].bold);
			printf("italic3=%d\n",osd_t[2].italic);
			printf("type3=%d\n",osd_t[2].type_osdtext);
			printf("rotate3=%d\n",osd_t[2].rotate);
			printf("clean=%d\n",osd_t[2].enable);
			
			writeOsd();	                   //把传过来的参数覆盖。再写入文件中
			
			Fifowrite();                   //Fifo通信
			
    }    
    
    
		websWrite(wp,T("123"));	
		websDone(wp, 200);
	}
}


// Privacy Mask
void FormPrivacy(webs_t wp,char_t *path,char_t *query)
{
	char_t *pszOperate = NULL;

	char_t *pszColorY = NULL;
	char_t *pszColorU 	 = NULL;
	char_t *pszColorV = NULL;
	char_t *pszPosX 	 = NULL;
	char_t *pszPosY  = NULL;
	char_t *pszWidth   = NULL;
	char_t *pszHeight  = NULL;

	pszOperate = websGetVar(wp, T("Operate"), T(""));
	
	printf("Prvacy mask operate: %s\n", pszOperate);

	// get privacy para
	if (0 == gstricmp(pszOperate, T("get"))) {
			websWrite(wp, T("HTTP/1.0 200 OK\n"));
			websWrite(wp, T("Server: %s\r\n"), WEBS_NAME);
			websWrite(wp, T("Pragma: no-cache\n"));
			websWrite(wp, T("Cache-control: no-cache\n"));
			websWrite(wp, T("Content-Type: text/xml\n"));
			websWrite(wp, T("\n"));
			
			websWrite(wp, T("<?xml version='1.0' encoding='UTF-8'?>"));
			websWrite(wp, T("<PrivacyMask>"));
			websWrite(wp, T("<ColorY>%s</ColorY>"), pszColorY);
			websWrite(wp, T("<ColorU>%s</ColorU>"), pszColorU);
			websWrite(wp, T("<ColorV>%s</ColorV>"), pszColorV);
			websWrite(wp, T("<PosX>%s</PosX>"),     pszPosX);
			websWrite(wp, T("<PosY>%s</PosY>"),     pszPosY);
			websWrite(wp, T("<Width>%s</Width>"),   pszWidth);
			websWrite(wp, T("<Height>%s</Height>"), pszHeight);
			websWrite(wp, T("</PrivacyMask>"));
			websDone(wp, 200);
	}
	// set or del privacy mask
	else if (0 == gstricmp(pszOperate, T("set")) ||
					 0 == gstricmp(pszOperate, T("del"))) {
		char szParam[20][20] = {"0"};

		pszColorY = websGetVar(wp, T("ColorY"), T(""));
		pszColorU = websGetVar(wp, T("ColorU"), T(""));
		pszColorV = websGetVar(wp, T("ColorV"), T(""));
		pszPosX   = websGetVar(wp, T("PosX"), T(""));
		pszPosY   = websGetVar(wp, T("PosY"), T(""));
		pszWidth  = websGetVar(wp, T("Width"), T(""));
		pszHeight = websGetVar(wp, T("Height"), T(""));
		
		printf("ColorY: %s\n", pszColorY);
		printf("ColorU: %s\n", pszColorU);
		printf("ColorV: %s\n", pszColorV);
		printf("PosX:   %s\n", pszPosX);
		printf("PosY:   %s\n", pszPosY);
		printf("Width:  %s\n", pszWidth);
		printf("Height: %s\n", pszHeight);
		
		int nIdx = 0;
		sprintf(szParam[nIdx++], "test_privacymask");
		sprintf(szParam[nIdx++], "-x%s", pszPosX);
		sprintf(szParam[nIdx++], "-y%s", pszPosX);
		sprintf(szParam[nIdx++], "-w%s", pszWidth);
		sprintf(szParam[nIdx++], "-h%s", pszHeight);
		sprintf(szParam[nIdx++], "-Y%s", pszColorY);
		sprintf(szParam[nIdx++], "-U%s", pszColorU);
		sprintf(szParam[nIdx++], "-V%s", pszColorV);
		
		if (0 == gstricmp(pszOperate, T("del"))) {
			sprintf(szParam[nIdx++], "-d");
		}

		char *szTmp[20] = {NULL};
		
		int i = 0;
		for (i = 0; i < nIdx; i++) {
			szTmp[i] = szParam[i];
		}
		szTmp[nIdx] = NULL;
		CreateProcess("test_privacymask", szTmp);
		
		websWrite(wp,T("0"));	
		websDone(wp, 200);
	}
	else if (0 == gstricmp(pszOperate, T("clear"))) {
		char *pszParam[] = {"test_privacymask", "--disable", NULL};
		
		CreateProcess("test_privacymask", pszParam);
		
		websWrite(wp,T("0"));	
		websDone(wp, 200);
	}
}
/**************************************************************
函数功能：创建执行子进程

参数：

(入口)
char *pszProcName            进程执行命令名称

(出口)
无

返回：子进程ID号: < 0 -- 失败, > 0 -- 成功.

主要思路：
1、创建子进程,如果成功则子进程自动运行

创建日期: 2010.06.25
Author:   lgh
****************************************************************/
pid_t CreateProcess(char *pszProcName, char *pszParam[])
{
	pid_t nPID = 0;
	char szProcPath[512] = {0};
	
	sprintf(szProcPath, "/usr/local/bin/%s", pszProcName);
	//sprintf(szProcPath, "%s", pszProcName);
#if 0
	getcwd(szDir, sizeof(szDir)); 
	sprintf(szProcPath, "%s/%s", szDir, pszProcName);
	printf("Process Run Path: %s\n", szProcPath);
	#endif

	// 设置不等待子进程退出信息
	signal(SIGCLD, SIG_IGN);
	nPID = fork();
	if (nPID == 0) {
#if 0
		// Set current working directory
		strcat(szDir, "/");
		strcat(szDir, pszProcName);
		if ((pTmp = strrchr(szDir, '/'))) {
			*pTmp = '\0';
			if (0 > chdir(szDir)) {
				perror("chdir");
			}
		}
#endif
		int i = 0;
		while (pszParam[i] != NULL) {
			printf("Param: %s\n", pszParam[i]);
			i++;
		}
		if (-1 == execv(szProcPath, pszParam)) {
			printf("execv %s failed: %s\n", szProcPath, strerror(errno));
			exit(errno);
		};

		exit(EXIT_SUCCESS);
	}
	else if (nPID < 0) {
		/* The fork failed. Report failure. */
		printf("Create Process %s Failed.\n", szProcPath);
	}
	else {
		printf("Create Process %s Success.\n", szProcPath);
	}

	return nPID;
}

// System Operate
void FormSystem(webs_t wp,char_t *path,char_t *query)
{
	char_t *pszOperate = NULL;

	pszOperate = websGetVar(wp, T("Operate"), T(""));
	
	printf("Prvacy mask operate: %s\n", pszOperate);

	// get privacy para
	if (0 == gstricmp(pszOperate, T("reboot"))) {
			
			system("reboot");
			
			websWrite(wp, T("</PrivacyMask>"));
			websDone(wp, 200);
	}
}